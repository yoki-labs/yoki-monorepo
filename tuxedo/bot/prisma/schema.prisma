generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Server {
    id       Int    @id @default(autoincrement())
    serverId String @unique @db.VarChar(255)

    // --- Specified by the bot
    premium     PremiumType?
    blacklisted Boolean      @default(false)
    flags       String[]

    // --- Server preferences
    prefix   String?
    locale   String  @default("en-US")
    timezone String?
    modulesDisabled ModuleName[] @default([])

    // --- Incomes
    disableDefaultIncomes DefaultIncomeType[]
    sellCut               Float @default(1)

    botJoinedAt DateTime? @default(now())
}

///// Other features /////
model Giveaway {
    // Basics
    id           String   @id @db.VarChar(255)
    serverId     String   @db.VarChar(255)
    channelId    String   @db.VarChar(255)
    messageId    String   @db.VarChar(255)
    // Rewards, rewardees, etc.
    text         String   @db.VarChar(200)
    // Who, when
    participants String[]
    winners      String[] @default([])
    winnerCount  Int
    endsAt       DateTime
    hasEnded     Boolean  @default(false)
    createdBy    String   @db.VarChar(255)
    createdAt    DateTime @default(now())
}

///// Currencies & Economy /////
model Currency {
    // Basics
    id              String   @id @db.VarChar(255)
    serverId        String   @db.VarChar(255)
    name            String   @db.VarChar(100)
    tag             String   @db.VarChar(16)
    emote           String   @db.VarChar(32) @default("small_orange_diamond")
    // Perks
    startingBalance Int?
    maximumBalance  Int?
    bankEnabled     Boolean  @default(true)
    //canLose         Boolean  @default(true)
    // Who, when
    createdBy       String?  @db.VarChar(255)
    createdAt       DateTime @default(now())
}

model IncomeCommand {
    // Basics
    id              Int                @id @default(autoincrement())
    serverId        String             @db.VarChar(255)
    incomeType      DefaultIncomeType?
    name            String?            @db.VarChar(64)
    // Overrides
    action          String?            @db.VarChar(750)
    cooldownMs      Int?
    rewards         Reward[]
    failChance      Float?
    failSubtractCut Float?
    // Who, when
    createdBy       String             @default("Ann6LewA") @db.VarChar(255)
    createdAt       DateTime           @default(now())
}
// Command and action received reward; this originally held item prices too, but it may have additional stuff
// that may not prove to be as useful in prices and stuff + hogs additional IDs easily
model Reward {
    // Basics
    id              Int           @id @default(autoincrement())
    serverId        String        @db.VarChar(255)
    // Relations
    incomeCommandId Int
    incomeCommand   IncomeCommand @relation(fields: [incomeCommandId], references: [id], onDelete: Cascade)
    // Reward
    currencyId String @db.VarChar(255)
    minAmount  Int
    maxAmount  Int
}

enum DefaultIncomeType {
    DAILY
    WORK
    HOBBY
    CHORE
    COMMUNITY
    ROB
    BLACKJACK
}

///// Items /////
model Item {
    // Basics
    id              String             @id @db.VarChar(32)
    serverId        String             @db.VarChar(255)
    name            String             @db.VarChar(64)
    // Overrides
    value           ItemValue[]
    givesRoles      Int[]              @db.Integer
    canBuy          Boolean            @default(false)
    // Who, when
    createdBy       String             @db.VarChar(255)
    createdAt       DateTime           @default(now())
}
// For giveaways in the future, item prices
model ItemValue {
    // Basics
    id              Int           @id @default(autoincrement())
    serverId        String        @db.VarChar(255)
    // Relations
    itemId          String        @db.VarChar(32)
    item            Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
    // Reward
    currencyId String @db.VarChar(255)
    amount     Int
}

///// Member Stuff /////
model ServerMember {
    // Basics
    id       String          @id @db.VarChar(255)
    serverId String          @db.VarChar(255)
    userId   String          @db.VarChar(255)
    // Inventory
    // balance     Json?           @db.JsonB
    // bankBalance Json?           @db.JsonB
    balances   MemberBalance[]
    items      MemberItem[]
}

model MemberBalance {
    // Basics
    id         Int          @id @default(autoincrement())
    serverId   String       @db.VarChar(255)
    memberId   String       @db.VarChar(255)
    currencyId String       @db.VarChar(255)
    // Relations
    member     ServerMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
    // Balance
    pocket     Int          @default(0)
    bank       Int          @default(0)
    all        Int          @default(0)
}
model MemberItem {
    // Basics
    id         Int          @id @default(autoincrement())
    serverId   String       @db.VarChar(255)
    memberId   String       @db.VarChar(255)
    itemId     String       @db.VarChar(32)
    // Relations
    member     ServerMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
    // Inventory
    amount     Int
}

///// Additional Configuration /////
// Copied from Yoki
enum ModuleName {
    ECONOMY
    SHOP
}
model Role {
    id        Int      @id @default(autoincrement())
    serverId  String   @db.VarChar(255)
    roleId    Int      @db.Integer
    createdAt DateTime @default(now())
    type      RoleType

    @@unique([serverId, roleId, type])
}

enum PremiumType {
    Gold
    Silver
    Copper
}

enum RoleType {
    MINIMOD
    MOD
    ADMIN
}
