generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Server {
    id       Int    @id @default(autoincrement())
    serverId String @unique @db.VarChar(255)

    // --- Specified by the bot
    premium     PremiumType?
    blacklisted Boolean      @default(false)
    flags       String[]

    // --- Server preferences
    prefix   String?
    locale   String  @default("en-US")
    timezone String?

    botJoinedAt DateTime? @default(now())
}

model Giveaway {
    // Basics
    id           String   @id @db.VarChar(255)
    serverId     String   @db.VarChar(255)
    channelId    String   @db.VarChar(255)
    messageId    String   @db.VarChar(255)
    // Rewards, rewardees, etc.
    text         String   @db.VarChar(200)
    // Who, when
    participants String[]
    winners      String[] @default([])
    winnerCount  Int
    endsAt       DateTime
    hasEnded     Boolean  @default(false)
    createdBy    String   @db.VarChar(255)
    createdAt    DateTime @default(now())
}

model Currency {
    // Basics
    id              String   @id @db.VarChar(255)
    serverId        String   @db.VarChar(255)
    name            String   @db.VarChar(100)
    tag             String   @db.VarChar(16)
    // Perks
    startingBalance Int?
    maximumBalance  Int?
    // Who, when
    createdBy       String?  @db.VarChar(255)
    createdAt       DateTime @default(now())
}

model DefaultIncomeOverride {
    // Basics
    id         Int               @id @default(autoincrement())
    serverId   String            @db.VarChar(255)
    incomeType DefaultIncomeType
    // Overrides
    cooldownMs Int?
    rewards    Reward[]
}

model Reward {
    // Basics
    id               Int                   @id @default(autoincrement())
    serverId         String                @db.VarChar(255)
    // Relations
    incomeOverrideId Int
    incomeOverride   DefaultIncomeOverride @relation(fields: [incomeOverrideId], references: [id])
    // Reward
    currencyId       String                @db.VarChar(255)
    minAmount        Int
    maxAmount        Int
}

model ServerMember {
    // Basics
    id       String          @id @db.VarChar(255)
    serverId String          @db.VarChar(255)
    userId   String          @db.VarChar(255)
    // Inventory
    // balance     Json?           @db.JsonB
    // bankBalance Json?           @db.JsonB
    balances MemberBalance[]
}

model MemberBalance {
    // Basics
    id         Int          @id @default(autoincrement())
    serverId   String       @db.VarChar(255)
    memberId   String       @db.VarChar(255)
    currencyId String       @db.VarChar(255)
    // Relations
    member     ServerMember @relation(fields: [memberId], references: [id])
    // Balance
    pocket     Int          @default(0)
    bank       Int          @default(0)
    all        Int          @default(0)
}

// Copied from Yoki
model Role {
    id        Int      @id @default(autoincrement())
    serverId  String   @db.VarChar(255)
    roleId    Int      @db.Integer
    createdAt DateTime @default(now())
    type      RoleType

    @@unique([serverId, roleId, type])
}

enum DefaultIncomeType {
    DAILY
    WORK
    HOBBY
}

enum PremiumType {
    Gold
    Silver
    Copper
}

enum RoleType {
    MINIMOD
    MOD
    ADMIN
}
