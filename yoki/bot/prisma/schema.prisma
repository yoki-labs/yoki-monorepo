generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Server {
    id                         Int           @id @default(autoincrement())
    serverId                   String        @unique @db.VarChar(255)
    botJoinedAt                DateTime?     @default(now())
    premium                    PremiumType?
    locale                     String        @default("en-US")
    muteRoleId                 Int?
    filterEnabled              Boolean       @default(false)
    filterInvites              Boolean       @default(false)
    urlFilterIsWhitelist       Boolean       @default(false)
    linkSeverity               Severity      @default(WARN)
    linkInfractionPoints       Int           @default(5)
    blacklisted                Boolean       @default(false)
    antiRaidEnabled            Boolean       @default(false)
    antiRaidResponse           ResponseType?
    antiRaidAgeFilter          Int?
    antiRaidChallengeChannel   String?       @db.VarChar(255)
    appealChannel              String?       @db.VarChar(255)
    appealsEnabled             Boolean       @default(false)
    flags                      String[]
    muteInfractionThreshold    Int?          @default(10)
    kickInfractionThreshold    Int?          @default(15)
    banInfractionThreshold     Int?          @default(45)
    softbanInfractionThreshold Int?          @default(25)
    spamInfractionPoints       Int           @default(5)
    timezone                   String?
    filterOnMods               Boolean       @default(false)
    antiHoistEnabled           Boolean       @default(false)
    prefix                     String?
    createdAt                  DateTime      @default(now())
    updatedAt                  DateTime?     @updatedAt
    modmailEnabled             Boolean       @default(false)
    modmailGroupId             String?       @db.VarChar(255)
    modmailCategoryId          Int?
    scanNSFW                   Boolean       @default(false)
    spamFrequency              Int           @default(9)
}

model LogChannel {
    id           Int            @id @default(autoincrement())
    serverId     String         @db.VarChar(255)
    channelId    String         @db.VarChar(255)
    createdAt    DateTime       @default(now())
    type         LogChannelType
    webhookId    String?        @db.VarChar(255)
    webhookToken String?        @db.VarChar(255)

    @@unique([serverId, channelId, type])
}

model Role {
    id        Int      @id @default(autoincrement())
    serverId  String   @db.VarChar(255)
    roleId    Int      @db.Integer
    createdAt DateTime @default(now())
    type      RoleType

    @@unique([serverId, roleId, type])
}

model ContentFilter {
    id               Int            @id @default(autoincrement())
    serverId         String         @db.VarChar(255)
    content          String         @db.VarChar(255)
    severity         Severity
    matching         FilterMatching @default(WORD)
    creatorId        String         @db.VarChar(255)
    createdAt        DateTime       @default(now())
    infractionPoints Int

    @@unique([serverId, content, matching])
}

model UrlFilter {
    id               Int      @id @default(autoincrement())
    serverId         String   @db.VarChar(255)
    // If we are going to use routes
    domain           String   @db.VarChar(255)
    severity         Severity
    creatorId        String   @db.VarChar(255)
    createdAt        DateTime @default(now())
    infractionPoints Int

    @@unique([serverId, domain])
}

model InviteFilter {
    id             Int      @id @default(autoincrement())
    serverId       String   @db.VarChar(255)
    targetServerId String   @db.VarChar(255)
    creatorId      String   @db.VarChar(255)
    createdAt      DateTime @default(now())

    @@unique([serverId, targetServerId])
}

model Preset {
    id               Int       @id @default(autoincrement())
    serverId         String
    preset           String    @db.VarChar(255)
    severity         Severity?
    infractionPoints Int?
}

model CustomTag {
    id        Int       @id @default(autoincrement())
    serverId  String    @db.VarChar(255)
    content   String    @db.Text
    name      String    @db.VarChar(255)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@unique([serverId, name, content])
}

model Action {
    id                String    @id @db.VarChar(255)
    serverId          String    @db.VarChar(255)
    type              Severity
    logChannelId      String?   @db.VarChar(255)
    logChannelMessage String?   @db.VarChar(255)
    executorId        String    @db.VarChar(255)
    reason            String?   @db.Text
    triggerContent    String?   @db.Text
    infractionPoints  Int
    channelId         String?   @db.VarChar(255)
    targetId          String    @db.VarChar(255)
    createdAt         DateTime  @default(now())
    updatedAt         DateTime? @updatedAt
    expiresAt         DateTime?
    expired           Boolean   @default(false)
}

model Message {
    messageId String    @id @unique @db.VarChar(255)
    serverId  String    @db.VarChar(255)
    channelId String    @db.VarChar(255)
    authorId  String    @db.VarChar(255)
    content   String    @db.Text
    embeds    Json?     @db.JsonB
    isBot     Boolean
    createdAt DateTime
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
}

model ForumTopic {
    forumTopicId Int       @id
    serverId     String    @db.VarChar(255)
    channelId    String    @db.VarChar(255)
    authorId     String    @db.VarChar(255)
    title        String    @db.Text
    content      String    @db.Text
    embeds       Json?     @db.JsonB
    isBot        Boolean
    createdAt    DateTime
    updatedAt    DateTime? @updatedAt
    deletedAt    DateTime?

    @@unique([serverId, forumTopicId])
}

model ReactionAction {
    id         Int                @id @default(autoincrement())
    channelId  String             @db.VarChar(255)
    serverId   String             @db.VarChar(255)
    messageId  String             @db.VarChar(255)
    emoteId    Int                @db.Integer
    actionType ReactionActionType

    @@unique([serverId, channelId, messageId, emoteId, actionType])
}

model ModmailThread {
    id                  String           @id @db.VarChar(255)
    serverId            String           @db.VarChar(255)
    userFacingChannelId String           @db.VarChar(255)
    modFacingChannelId  String           @db.VarChar(255)
    openerId            String           @db.VarChar(255)
    handlingModerators  String[]
    closed              Boolean          @default(false)
    messages            ModmailMessage[]
    createdAt           DateTime         @default(now())
    updatedAt           DateTime?        @updatedAt
}

model ModmailMessage {
    originalMessageId String        @id @db.VarChar(255)
    sentMessageId     String        @db.VarChar(255)
    channelId         String        @db.VarChar(255)
    authorId          String        @db.VarChar(255)
    createdAt         DateTime      @default(now())
    content           String        @db.Text
    modmailThread     ModmailThread @relation(fields: [modmailThreadId], references: [id])
    modmailThreadId   String
}

model Captcha {
    id             String   @id @db.VarChar(255)
    value          String?  @db.VarChar(255)
    serverId       String   @db.VarChar(255)
    triggeringUser String   @db.VarChar(255)
    url            String?  @db.Text
    solved         Boolean  @default(false)
    hashedIp       String?  @db.VarChar(255)
    createdAt      DateTime @default(now())
}

model RoleState {
    serverId  String    @db.VarChar(255)
    userId    String    @db.VarChar(255)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    roles     Int[]     @default([])

    @@unique([serverId, userId])
}

model Appeal {
    id        Int      @id @default(autoincrement())
    content   String   @db.Text
    createdAt DateTime @default(now())
    serverId  String   @db.VarChar(255)
    creatorId String   @db.VarChar(255)
}

enum LogChannelType {
    all
    mod_actions
    member_roles_updates
    member_updates
    member_joins
    member_leaves
    message_edits
    message_deletions
    topic_locks
    topic_edits
    topic_deletions
    notifications
    modmail_logs
}

enum RoleType {
    MINIMOD
    MOD
    ADMIN
    REACT
}

enum Severity {
    NOTE
    WARN
    MUTE
    KICK
    SOFTBAN
    BAN
}

enum FilterMatching {
    WORD
    PREFIX
    INFIX
    POSTFIX
}

enum ReactionActionType {
    MODMAIL
}

enum PremiumType {
    Gold
    Silver
}

enum ResponseType {
    TEXT_CAPTCHA
    SITE_CAPTCHA
    KICK
}
