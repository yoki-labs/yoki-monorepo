generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Server {
    id                         Int       @id @default(autoincrement())
    serverId                   String    @unique @db.VarChar(255)
    botJoinedAt                DateTime? @default(now())
    premium                    Boolean   @default(false)
    locale                     String    @default("en-US")
    muteRoleId                 Int?
    filterEnabled              Boolean   @default(false)
    blacklisted                Boolean   @default(false)
    flags                      String[]
    muteInfractionThreshold    Int?      @default(10)
    kickInfractionThreshold    Int?      @default(15)
    banInfractionThreshold     Int?      @default(45)
    softbanInfractionThreshold Int?      @default(25)
    spamInfractionPoints       Int       @default(5)
    filterOnMods               Boolean   @default(false)
    prefix                     String?
    createdAt                  DateTime  @default(now())
    updatedAt                  DateTime? @updatedAt
}

model LogChannel {
    id           Int            @id @default(autoincrement())
    serverId     String         @db.VarChar(255)
    channelId    String         @db.VarChar(255)
    createdAt    DateTime       @default(now())
    type         LogChannelType
    webhookId    String?        @db.VarChar(255)
    webhookToken String?        @db.VarChar(255)
}

model Role {
    id        Int      @id @default(autoincrement())
    serverId  String   @db.VarChar(255)
    roleId    Int      @db.Integer
    createdAt DateTime @default(now())
    type      RoleType
}

model ContentFilter {
    id               Int      @id @default(autoincrement())
    serverId         String   @db.VarChar(255)
    content          String   @db.VarChar(255)
    severity         Severity
    creatorId        String   @db.VarChar(255)
    createdAt        DateTime @default(now())
    infractionPoints Int
}

model Preset {
    id       Int    @id @default(autoincrement())
    serverId String
    preset   String @db.VarChar(255)
}

model CustomTag {
    id        Int       @id @default(autoincrement())
    serverId  String    @db.VarChar(255)
    content   String    @db.Text
    name      String    @db.VarChar(255)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model Action {
    id                String    @id @db.VarChar(255)
    serverId          String    @db.VarChar(255)
    type              Severity
    logChannelId      String?   @db.VarChar(255)
    logChannelMessage String?   @db.VarChar(255)
    executorId        String    @db.VarChar(255)
    reason            String?   @db.Text
    triggerContent    String?   @db.Text
    infractionPoints  Int
    channelId         String?   @db.VarChar(255)
    targetId          String    @db.VarChar(255)
    createdAt         DateTime  @default(now())
    updatedAt         DateTime? @updatedAt
    expiresAt         DateTime?
    expired           Boolean   @default(false)
}

model Message {
    messageId String    @id @db.VarChar(255)
    serverId  String    @db.VarChar(255)
    channelId String    @db.VarChar(255)
    authorId  String    @db.VarChar(255)
    content   String?   @db.Text
    embeds    Json?     @db.JsonB
    isBot     Boolean
    createdAt DateTime
    updatedAt DateTime?
    deletedAt DateTime?
}

enum LogChannelType {
    ALL
    MOD_ACTION_LOG
    MEMBER_ROLES_UPDATE
    MEMBER_UPDATE
    MEMBER_JOIN_LEAVE
    CHAT_MESSAGE_UPDATE
    CHAT_MESSAGE_DELETE
    NOTIFICATION
}

enum RoleType {
    MOD
    ADMIN
    REACT
}

enum Severity {
    NOTE
    WARN
    MUTE
    KICK
    SOFTBAN
    BAN
}
